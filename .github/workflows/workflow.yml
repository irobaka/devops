name: Devops pipeline

on:
  push:
    branches: ['main']

env:
  APP_IMAGE: irobaka/devops-app:${{ github.sha }}
  SCHEDULER_IMAGE: irobaka/devops-scheduler:${{ github.sha }}
  WORKER_IMAGE: irobaka/devops-worker:${{ github.sha }}
  NGINX_IMAGE: irobaka/devops-nginx:${{ github.sha }}
  POSTGRES_IMAGE: irobaka/devops-postgres:${{ github.sha }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}


jobs:
  build-app-images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build app images
        run: |
          docker build -t $APP_IMAGE --target=prod --build-arg user=devops --build-arg uid=1000 -f docker/Dockerfile.php .
          docker build -t $SCHEDULER_IMAGE --target=prod_scheduler --build-arg user=devops --build-arg uid=1000 -f docker/Dockerfile.php .
          docker build -t $WORKER_IMAGE --target=prod_worker --build-arg user=devops --build-arg uid=1000 -f docker/Dockerfile.php .
      - name: Push app images
        run: |
          docker push $APP_IMAGE
          docker push $SCHEDULER_IMAGE
          docker push $WORKER_IMAGE

  build-postgres:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Postgres image
        run: docker build -t $POSTGRES_IMAGE -f docker/Dockerfile.postgres .
      - name: Push Postgres Image
        run: docker push $POSTGRES_IMAGE

  analyze:
    needs: [build-app-images, build-postgres]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull app image
        run: docker pull $APP_IMAGE
      - name: Pull postgres image
        run: docker pull $POSTGRES_IMAGE
      - name: Run phpstan
        run: docker run --rm -t $APP_IMAGE ./vendor/bin/phpstan analyze --memory-limit=1G
      - name: Run phpinsights
        run: docker run --rm -t $APP_IMAGE php artisan insights --no-interaction --min-quality=90 --min-complexity=90 --min-architecture=90 --min-style=90 --ansi --format=github-action

  test:
    needs: [build-app-images, build-postgres]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull app image
        run: docker pull $APP_IMAGE
      - name: Pull postgres image
        run: docker pull $POSTGRES_IMAGE
      - name: Run tests
        run: |
          docker-compose -f docker-compose.ci.yml up -d
          docker-compose -f docker-compose.ci.yml exec -T app php artisan config:clear
          docker-compose -f docker-compose.ci.yml exec -T app cp .env.example .env
          docker-compose -f docker-compose.ci.yml exec -T app php artisan test
          docker-compose -f docker-compose.ci.yml down

  remove-images:
    needs: [ analyze, test ]
    runs-on: ubuntu-latest
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    steps:
      - uses: actions/checkout@v3
      - name: Remove images
        run: |
          ./deployment/bin/remove-image.sh devops-app ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN }}
          ./deployment/bin/remove-image.sh devops-worker ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN }}
          ./deployment/bin/remove-image.sh devops-scheduler ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN }}
          ./deployment/bin/remove-image.sh devops-postgres ${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN }}

  build-nginx:
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build nginx image
        run: docker build -t $NGINX_IMAGE --target=prod -f docker/Dockerfile.nginx .
      - name: Push nginx Image
        run: docker push $NGINX_IMAGE

  deploy-prod:
    needs: [ build-nginx ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Copy SSH key
        run: |
          echo "${{ secrets.SSH_KEY }}" >> ./id_rsa
          chmod 600 id_rsa
      - name: Deploy app
        run: |
          scp -C -o StrictHostKeyChecking=no -i ./id_rsa ./deployment/bin/deploy.sh ${{ secrets.PROD_SERVER }}:/home/devops/deploy.sh
          scp -C -o StrictHostKeyChecking=no -i ./id_rsa ./docker-compose.prod.yml ${{ secrets.PROD_SERVER }}:/usr/src/docker-compose.prod.yml
          scp -C -o StrictHostKeyChecking=no -i ./id_rsa ./.env.prod.template ${{ secrets.PROD_SERVER }}:/usr/src/.env
          ssh -tt -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.PROD_SERVER }} "chmod +x /home/devops/deploy.sh"
          ssh -tt -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.PROD_SERVER }} "
            sed -i "/IMAGE_TAG/c\IMAGE_TAG=${{ github.sha }}" /usr/src/.env
            sed -i "/COMPOSE_PROJECT_NAME/c\COMPOSE_PROJECT_NAME=posts" /usr/src/.env

            sed -i "/DOCKERHUB_USERNAME/c\DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" /usr/src/.env
            sed -i "/DOCKERHUB_PASSWORD/c\DOCKERHUB_PASSWORD=${{ secrets.DOCKERHUB_TOKEN }}" /usr/src/.env

            sed -i "/DB_PASSWORD/c\DB_PASSWORD=${{ secrets.DB_PASSWORD }}" /usr/src/.env
            sed -i "/DB_USERNAME/c\DB_USERNAME=${{ secrets.DB_USERNAME }}" /usr/src/.env
#            sed -i "/AWS_ACCESS_KEY_ID/c\AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" /usr/src/.env
#            sed -i "/AWS_SECRET_ACCESS_KEY/c\AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" /usr/src/.env
            sed -i "/APP_KEY/c\APP_KEY=${{ secrets.APP_KEY }}" /usr/src/.env"
          ssh -tt -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.PROD_SERVER }} "/home/devops/deploy.sh"
