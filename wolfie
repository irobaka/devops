#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" = "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. BigbyCMS supports macOS, Linux, and Windows (WSL2)." >&2
    exit 1
fi

#Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
display_help() {
    echo "BigbyCMS"
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  wolfie COMMAND [options] [arguments]"
    echo
    echo "Unknown commands are passed to the docker-compose binary."
    echo
    echo "${YELLOW}docker-compose Commands:${NC}"
    echo "  ${GREEN}wolfie up${NC}        Start the application"
    echo "  ${GREEN}wolfie up -d${NC}     Start the application in the background"
    echo "  ${GREEN}wolfie stop${NC}      Stop the application"
    echo "  ${GREEN}wolfie restart${NC}   Restart the application"
    echo "  ${GREEN}wolfie ps${NC}        Display the status of all containers"
    echo
    echo "${YELLOW}Artisan Commands:${NC}"
    echo "  ${GREEN}wolfie artisan ...${NC}          Run an Artisan command"
    echo "  ${GREEN}wolfie artisan queue:work${NC}"
    echo
    echo "${YELLOW}PHP Commands:${NC}"
    echo "  ${GREEN}wolfie php ...${NC}   Run a snippet of PHP code"
    echo "  ${GREEN}wolfie php -v${NC}"
    echo
    echo "${YELLOW}Composer Commands:${NC}"
    echo "  ${GREEN}wolfie composer ...${NC}                       Run a Composer command"
    echo "  ${GREEN}wolfie composer require laravel/sanctum${NC}"
    echo
    echo "${YELLOW}Node Commands:${NC}"
    echo "  ${GREEN}wolfie node ...${NC}         Run a Node command"
    echo "  ${GREEN}wolfie node --version${NC}"
    echo
    echo "${YELLOW}NPM Commands:${NC}"
    echo "  ${GREEN}wolfie npm ...${NC}        Run a npm command"
    echo "  ${GREEN}wolfie npx${NC}            Run a npx command"
    echo "  ${GREEN}wolfie npm run dev${NC}"
    echo
    echo "${YELLOW}Database Commands:${NC}"
    echo "  ${GREEN}wolfie psql${NC}      Start a PostgreSQL CLI session within the 'pgsql' container"
    echo "  ${GREEN}wolfie redis${NC}     Start a Redis CLI session within the 'redis' container"
    echo
    echo "${YELLOW}Debugging:${NC}"
    echo "  ${GREEN}wolfie debug ...${NC}          Run an Artisan command in debug mode"
    echo "  ${GREEN}wolfie debug queue:work${NC}"
    echo
    echo "${YELLOW}Running Tests:${NC}"
    echo "  ${GREEN}wolfie test${NC}          Run the tests via the Artisan test command"
    echo
    echo "${YELLOW}Container CLI:${NC}"
    echo "  ${GREEN}wolfie shell${NC}        Start a shell session within the application container"
    echo "  ${GREEN}wolfie bash${NC}         Alias for 'wolfie shell'"
    echo "  ${GREEN}wolfie root-shell${NC}   Start a root shell session within the application container"
    echo "  ${GREEN}wolfie root-bash${NC}    Alias for 'wolfie root-shell'"
    echo "  ${GREEN}wolfie tinker${NC}       Start a new Laravel Tinker session"
    echo
    echo "${YELLOW}Sharing:${NC}"
    echo "  ${GREEN}wolfie share${NC}   Share the application publicly via a temporary URL"
    echo "  ${GREEN}wolfie open${NC}    Open the site in your browser"
    echo
    echo "${YELLOW}Binaries:${NC}"
    echo "  ${GREEN}wolfie bin ...${NC}   Run Composer binary scripts from the vendor/bin directory"
    echo
    echo "${YELLOW}Customization:${NC}"
    echo "  ${GREEN}wolfie build --no-cache${NC}       Rebuild all of the Wolfie containers"

    exit 1
}

wolfie_is_not_running() {
    echo "${BOLD}Wolfie is not running.${NC}" >&2
    echo "" >&2
    echo "${BOLD}You may start wolfie using the following commands:${NC} './wolfie up' or './wolfie up -d'" >&2
    exit 1
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "-help" ] || [ "$1" = "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so Laravel's environment variables are available...
# shellcheck source=/dev/null
if [ -n "$APP_ENV" ] && [ -f ./.env."$APP_ENV" ]; then
  . ./.env."$APP_ENV";
elif [ -f ./.env ]; then
  . ./.env;
fi

# Define Docker Compose command prefix...
DOCKER_COMPOSE="docker compose"

EXEC="yes"

if ! docker info > /dev/null 2>&1; then
    echo "${BOLD}Docker is not running.${NC}" >&2
    exit 1
fi

if $DOCKER_COMPOSE ps --status=exited | grep "app" > /dev/null 2>&1; then
    echo "${BOLD}Shutting down old Wolfie processes...${NC}" >&2
    $DOCKER_COMPOSE down > /dev/null 2>&1
    EXEC="no"
elif [ -z "$($DOCKER_COMPOSE ps -q)" ]; then
    EXEC="no"
fi

ARGS=()

# Proxy PHP commands to the "php" binary on the application container...
if [ "$1" == "php" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("app" "php" "$@")
    else
        wolfie_is_not_running
    fi

# Proxy vendor binary commands on the application container...
elif [ "$1" == "bin" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("app" ./vendor/bin/"$@")
    else
        wolfie_is_not_running
    fi

# Proxy Composer commands to the "composer" binary on the application container...
elif [ "$1" == "composer" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("app" "composer" "$@")
    else
        wolfie_is_not_running
    fi

# Proxy Artisan commands to the "artisan" binary on the application container...
elif [ "$1" == "artisan" ] || [ "$1" == "art" ] || [ "$1" == "a" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("app" php artisan "$@")
    else
        wolfie_is_not_running
    fi

# Proxy the "debug" command to the "php artisan" binary on the application container with xdebug enabled...
elif [ "$1" == "debug" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -e XDEBUG_TRIGGER=1)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("app" php artisan "$@")
    else
        wolfie_is_not_running
    fi

# Pass unknown commands to the "docker-compose" binary...
else
    ARGS+=("$@")
fi

# Run Docker Compose with the defined arguments...
$DOCKER_COMPOSE "${ARGS[@]}"
