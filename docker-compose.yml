volumes:
    devops_redis:
    devops_postgres:
    minio:

services:
    app:
        restart: unless-stopped
        build:
            context: .
            dockerfile: docker/Dockerfile.php
            target: dev
            args:
                user: ${DOCKER_DEFAULT_USER:-devops}
                uid: ${DOCKER_DEFAULT_UID:-1000}
        healthcheck:
            test: [ "CMD", "nc", "-zv", "localhost", "9000" ]
            interval: 30s
            timeout: 5s
            retries: 3
            start_period: 30s
        volumes:
            - ./app:/usr/src/app
            - ./bootstrap:/usr/src/bootstrap
            - ./config:/usr/src/config
            - ./database:/usr/src/database
            - ./resources:/usr/src/resources
            - ./routes:/usr/src/routes
            - ./storage:/usr/src/storage
            - ./tests:/usr/src/tests
            - ./.env:/usr/src/.env
            - ./composer.json:/usr/src/composer.json
            - ./composer.lock:/usr/src/composer.lock
            - ./phpstan.neon.dist:/usr/src/phpstan.neon.dist
            - ./phpunit.xml:/usr/src/phpunit.xml
            - ./public:/usr/src/public
            - ./deployment/config/php-fpm/php-dev.ini:/usr/local/etc/php/conf.d/php.ini
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            update:
                condition: service_started
            minio:
                condition: service_healthy
        extra_hosts:
            - "host.docker.internal:host-gateway"

    update:
        build:
            context: .
            dockerfile: docker/Dockerfile.php
            target: dev
            args:
                user: ${DOCKER_DEFAULT_USER:-devops}
                uid: ${DOCKER_DEFAULT_UID:-1000}
        restart: no
        command: sh -c "./update-for-development.sh"
        volumes:
            - ./composer.json:/usr/src/composer.json
            - ./composer.lock:/usr/src/composer.lock
            - ./.env:/usr/src/.env
            - ./deployment/bin/update.sh:/usr/src/update.sh
            - ./deployment/bin/update-for-development.sh:/usr/src/update-for-development.sh
        depends_on:
            postgres:
                condition: service_healthy

    scheduler:
        restart: unless-stopped
        command: sh -c "sleep 60 && /usr/src/scheduler.sh"
        build:
            context: .
            dockerfile: docker/Dockerfile.php
            target: dev_scheduler
            args:
                user: ${DOCKER_DEFAULT_USER:-devops}
                uid: ${DOCKER_DEFAULT_UID:-1000}
        volumes:
            - ./app:/usr/src/app
            - ./bootstrap:/usr/src/bootstrap
            - ./config:/usr/src/config
            - ./database:/usr/src/database
            - ./routes:/usr/src/routes
            - ./storage:/usr/src/storage
            - ./tests:/usr/src/tests
            - ./.env:/usr/src/.env
            - ./composer.json:/usr/src/composer.json
            - ./composer.lock:/usr/src/composer.lock
            - ./phpunit.xml:/usr/src/phpunit.xml
            - ./scheduler.sh:/usr/src/scheduler.sh
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            update:
                condition: service_started
            minio:
                condition: service_healthy
        extra_hosts:
            - "host.docker.internal:host-gateway"

    worker:
        restart: unless-stopped
        build:
            context: .
            dockerfile: docker/Dockerfile.php
            target: dev_worker
            args:
                user: ${DOCKER_DEFAULT_USER:-devops}
                uid: ${DOCKER_DEFAULT_UID:-1000}
        healthcheck:
            test: [ "CMD", "php", "/usr/src/artisan", "queue:monitor", "default" ]
            interval: 30s
            timeout: 5s
            retries: 3
            start_period: 30s
        volumes:
            - ./app:/usr/src/app
            - ./bootstrap:/usr/src/bootstrap
            - ./config:/usr/src/config
            - ./database:/usr/src/database
            - ./routes:/usr/src/routes
            - ./storage:/usr/src/storage
            - ./tests:/usr/src/tests
            - ./.env:/usr/src/.env
            - ./composer.json:/usr/src/composer.json
            - ./composer.lock:/usr/src/composer.lock
            - ./phpunit.xml:/usr/src/phpunit.xml
            - ./worker.sh:/usr/src/worker.sh
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            update:
                condition: service_started
            minio:
                condition: service_healthy
        extra_hosts:
            - "host.docker.internal:host-gateway"

    redis:
        image: redis:7.2.4-alpine
        restart: unless-stopped
        volumes:
            - devops_redis:/data
        ports:
            - "63790:6379"
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 30s
            timeout: 5s
            retries: 3
            start_period: 30s

    postgres:
        build:
            context: .
            dockerfile: docker/Dockerfile.postgres
        restart: unless-stopped
        environment:
            POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
            POSTGRES_USER: ${DB_USERNAME:-postgres}
            PGUSER: ${DB_USERNAME:-postgres}
            POSTGRES_DB: ${DB_DATABASE:-devops}
        volumes:
            - devops_postgres:/var/lib/postgresql/data
        ports:
            - "54320:5432"
        healthcheck:
            test: [ "CMD", "pg_isready" ]
            interval: 30s
            timeout: 5s
            retries: 3
            start_period: 30s

    nginx:
        restart: unless-stopped
        build:
            context: .
            dockerfile: docker/Dockerfile.nginx
            target: dev
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost/up" ]
            interval: 30s
            timeout: 5s
            retries: 3
            start_period: 30s
        ports:
            - "80:80"
        depends_on:
            app:
                condition: service_started

    frontend:
        restart: unless-stopped
        tty: true
        build:
            context: .
            dockerfile: docker/Dockerfile.frontend
        volumes:
            - ./app:/usr/src/app
            - ./config:/usr/src/config
            - ./database:/usr/src/database
            - ./resources:/usr/src/resources
            - ./routes:/usr/src/routes
            - ./storage:/usr/src/storage
            - ./.env:/usr/src/.env
            - ./package.json:/usr/src/package.json
            - ./package-lock.json:/usr/src/package-lock.json
            - ./postcss.config.js:/usr/src/postcss.config.js
            - ./tailwind.config.js:/usr/src/tailwind.config.js
            - ./vite.config.js:/usr/src/vite.config.js
            - ./public:/usr/src/public
        ports:
            - "5173:5173"
        depends_on:
            app:
                condition: service_started

    minio:
        image: bitnami/minio:latest
        restart: unless-stopped
        volumes:
            -   minio:/bitnami/minio/data
        ports:
            - "9000:9000"
            - "9001:9001"
        environment:
            MINIO_ROOT_USER: ${MINIO_ACCESS_KEY_ID:-postgres}
            MINIO_ROOT_PASSWORD: ${MINIO_SECRET_ACCESS_KEY:-postgres}
            MINIO_DEFAULT_BUCKETS: uploads,public
        healthcheck:
            test: [ "CMD", "mc", "ready", "local" ]
            interval: 30s
            timeout: 5s
            retries: 3
            start_period: 30s
